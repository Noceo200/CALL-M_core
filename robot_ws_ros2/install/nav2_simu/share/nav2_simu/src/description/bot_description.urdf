<?xml version="1.0"?>
<robot name="bot" xmlns:xacro="http://ros.org/wiki/xacro">

	<!-- Define robot constants -->
	<xacro:property name="square1_length" value="0.48"/>
	<xacro:property name="square1_height" value="0.03"/> 
	<xacro:property name="square2_length" value="0.27"/>
	<xacro:property name="square2_height" value="0.12"/> 
	<xacro:property name="square3_height" value="0.36"/>

	<xacro:property name="wheels_radius" value="0.05"/> 
	<xacro:property name="triangle_lenght" value="0.32"/> <!-- Side's Triangle length-->
	<xacro:property name="wheels_distance" value="${sqrt(((3*(triangle_lenght**4))/16)+((triangle_lenght**2)/4))}"/> <!-- Radius between origin and wheels-->
	<xacro:property name="wheels_zoffset" value="0.02"/>

	<!-- Define some commonly used intertial properties  -->
	<xacro:macro name="box_inertia" params="m w h d">
		<inertial>
		<origin xyz="0 0 0" rpy="${pi/2} 0 ${pi/2}"/>      
		<mass value="${m}"/>
		<inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}"/>
		</inertial>
	</xacro:macro>

	<xacro:macro name="cylinder_inertia" params="m r h">
		<inertial>
		<origin xyz="0 0 0" rpy="${pi/2} 0 0" />      
		<mass value="${m}"/>
		<inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy = "0" ixz = "0" iyy="${(m/12) * (3*r*r + h*h)}" iyz = "0" izz="${(m/2) * (r*r)}"/> 
		</inertial>
	</xacro:macro>

	<xacro:macro name="sphere_inertia" params="m r">
		<inertial>
		<mass value="${m}"/>
		<inertia ixx="${(2/5) * m * (r*r)}" ixy="0.0" ixz="0.0" iyy="${(2/5) * m * (r*r)}" iyz="0.0" izz="${(2/5) * m * (r*r)}"/>
		</inertial>
	</xacro:macro>

	<!-- Robot Base -->
	<!-- Dummy link may need to be added because KDL does not support root link with inertia-->
	<link name="base_link">
		<visual>
		<geometry>
			<box size="${square1_length} ${square1_length} ${square1_height}"/>
		</geometry>
		<material name="Cyan">
			<color rgba="0 1.0 1.0 1.0"/>
		</material>
		</visual>
		<collision>
		<geometry>
			<box size="${square1_length} ${square1_length} ${square1_height}"/>
		</geometry>
		</collision>
		<xacro:box_inertia m="15" w="${square1_length}" d="${square1_length}" h="${square1_height}"/>
	</link>


	<!-- Others Robot structures -->
	<link name="base2_link">
		<visual>
		<geometry>
			<box size="${square2_length} ${square2_length} ${square2_height}"/>
		</geometry>
		<material name="Cyan">
			<color rgba="0 1.0 1.0 1.0"/>
		</material>
		</visual>
		<collision>
		<geometry>
			<box size="${square2_length} ${square2_length} ${square2_height*0.8}"/>
		</geometry>
		</collision>
		<xacro:box_inertia m="0.5" w="${square2_length}" d="${square2_length}" h="${square2_height}"/>
	</link>
	<joint name="$base2_joint" type="fixed">
		<parent link="base_link"/>
		<child link="base2_link"/>
		<origin xyz="0.0 0.0 ${(square1_height/2)+(square2_height/2)}" rpy="0 0 0"/>
	</joint>

	<link name="base3_link">
		<visual>
		<geometry>
			<box size="${square1_length} ${square1_length} ${square3_height}"/>
		</geometry>
		<material name="Cyan">
			<color rgba="0 1.0 1.0 1.0"/>
		</material>
		</visual>
		<collision>
		<geometry>
			<box size="${square1_length} ${square1_length} ${square3_height}"/>
		</geometry>
		</collision>
		<xacro:box_inertia m="0.5" w="${square1_length}" d="${square1_length}" h="${square3_height}"/>
	</link>
	<joint name="$base3_joint" type="fixed">
		<parent link="base_link"/>
		<child link="base3_link"/>
		<origin xyz="0.0 0.0 ${(square1_height/2)+square2_height+(square3_height/2)}" rpy="0 0 0"/>
	</joint>

	<!-- Robot Footprint-->
	<link name="base_footprint">
		<xacro:box_inertia m="0" w="0" d="0" h="0"/>
	</link>

	<joint name="base_joint" type="fixed">
		<parent link="base_link"/>
		<child link="base_footprint"/>
		<origin xyz="0.0 0.0 ${-(wheels_radius*2+wheels_zoffset+square1_height/2)}" rpy="0 0 0"/>
	</joint>

	  <!-- 3 Wheels and there support to simulate sphere joint -->
	<xacro:macro name="wheel" params="prefix angle type">
		<link name="${prefix}_sup_link">
		<visual>
			<geometry>
				<cylinder radius="${wheels_radius}" length="${wheels_zoffset}"/>
			</geometry>
			<material name="Gray">
			<color rgba="0.5 0.5 0.5 1.0"/>
			</material>
		</visual>
		<collision>
			<geometry>
			<cylinder radius="${wheels_radius}" length="${wheels_zoffset/2}"/>
			</geometry>
		</collision>
		<xacro:cylinder_inertia m="2" r="${wheels_radius}" h="${wheels_zoffset}"/>
		</link>
		<joint name="${prefix}_sup_joint" type="continuous">
			<parent link="base_link"/>
			<child link="${prefix}_sup_link"/>
			<origin xyz="${wheels_distance*cos(angle)} ${wheels_distance*sin(angle)} ${-((wheels_zoffset/2)+(square1_height/2))}" rpy="0 0 0"/>
			<axis xyz="0 0 1"/>

		</joint>
		<link name="${prefix}_link">
		<visual>
			<geometry>
				<sphere radius="${wheels_radius}"/>
			</geometry>
			<material name="Gray">
			<color rgba="0.5 0.5 0.5 1.0"/>
			</material>
		</visual>
		<xacro:if value="${type == 'sphere'}">
			<collision>
			<origin xyz="0 0 0" rpy="0 0 0"/>
			<geometry>
				<sphere radius="${wheels_radius}"/>
			</geometry>
			</collision>
			<xacro:sphere_inertia m="0.5" r="${wheels_radius}"/>
		</xacro:if>
		<xacro:if value="${type == 'cylinder'}">
			<collision>
			<origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
			<geometry>
				<cylinder radius="${wheels_radius}" length="${wheels_radius*2}"/>
			</geometry>
			</collision>
			<xacro:cylinder_inertia m="0.5" r="${wheels_radius}" h="${wheels_radius*2}"/>
		</xacro:if>
		</link>
		<joint name="${prefix}_joint" type="continuous">
			<parent link="${prefix}_sup_link"/>
			<child link="${prefix}_link"/>
			<origin xyz="0.0 0.0 ${-wheels_radius-wheels_zoffset/2}" rpy="0 0 0"/>
			<axis xyz="0 1 0"/>
		</joint>
	</xacro:macro>

	<xacro:wheel prefix="wheel_f" angle="0.0" type="sphere" />
	<xacro:wheel prefix="wheel_bl" angle="${2*pi/3}" type="sphere" />
	<xacro:wheel prefix="wheel_br" angle="${-2*pi/3}" type="sphere" />

	<!--2 LIDAR-->
	<xacro:macro name="lidar" params="prefix x y">
		<link name="${prefix}_link">
			<inertial>
			<origin xyz="0 0 0" rpy="0 0 0"/>
			<mass value="0.125"/>
			<inertia ixx="0.001"  ixy="0"  ixz="0" iyy="0.001" iyz="0" izz="0.001" />
			</inertial>

			<collision>
			<origin xyz="0 0 0" rpy="0 0 0"/>
			<geometry>
				<cylinder radius="0.0508" length="${0.1}"/>
			</geometry>
			</collision>

			<visual>
			<origin xyz="0 0 0" rpy="0 0 0"/>
			<geometry>
				<cylinder radius="0.0508" length="${0.1}"/>
			</geometry>
			</visual>
		</link>
			
		<joint name="${prefix}_joint" type="fixed">
			<parent link="base_link"/>
			<child link="${prefix}_link"/>
			<origin xyz="${x} ${y} ${square1_height/2+0.1/2}" rpy="0 0 0"/>
		</joint>
			
		<gazebo reference="${prefix}_link">
			<sensor name="${prefix}" type="ray">
			<!--<pose>0 0 0.0225 0 0 0</pose> (seems to be ignored)-->
			<always_on>true</always_on>
			<visualize>true</visualize>
			<update_rate>5</update_rate>
			<ray>
				<scan>
				<horizontal>
					<samples>360</samples>
					<resolution>1.000000</resolution>
					<min_angle>0.000000</min_angle>
					<max_angle>6.280000</max_angle>
				</horizontal>
				</scan>
				<range>
				<min>0.120000</min>
				<max>3.5</max>
				<resolution>0.015000</resolution>
				</range>
				<noise>
				<type>gaussian</type>
				<mean>0.0</mean>
				<stddev>0.01</stddev>
				</noise>
			</ray>
			<plugin name="scan" filename="libgazebo_ros_ray_sensor.so">
				<ros>
				<remapping>~/out:=${prefix}_scan</remapping>
				</ros>
				<output_type>sensor_msgs/LaserScan</output_type>
				<frame_name>${prefix}_link</frame_name>
			</plugin>
			</sensor>
		</gazebo>
	</xacro:macro>

	<xacro:lidar prefix="lidar1" x="${(square1_length/2)-0.0508}" y="${(square1_length/2)-0.0508}" />
	<xacro:lidar prefix="lidar2" x="${-((square1_length/2)-0.0508)}" y="${-((square1_length/2)-0.0508)}" />

	<!--2 CAMERA-->
	<!--camera object front-->
	<link name="camf_link">
		<visual>
		<origin xyz="0 0 0" rpy="0 0 0"/>
		<geometry>
			<box size="0.015 0.130 0.022"/>
		</geometry>
		</visual>

		<collision>
		<origin xyz="0 0 0" rpy="0 0 0"/>
		<geometry>
			<box size="0.015 0.130 0.022"/>
		</geometry>
		</collision>

		<inertial>
		<origin xyz="0 0 0" rpy="0 0 0"/>
		<mass value="0.035"/>
		<inertia ixx="0.001"  ixy="0"  ixz="0" iyy="0.001" iyz="0" izz="0.001" />
		</inertial>
	</link>

	<joint name="camf_joint" type="fixed">
		<parent link="base3_link"/>
		<child link="camf_link"/>
		<origin xyz="${(square1_length/2)+0.015/2} 0.0 ${(square2_height/2)-0.03-0.022/2}" rpy="0.0 0.0 0.0"/>
	</joint>

	<!--depth camera front-->
	<link name="camf_depth_frame"/>

	<joint name="camf_depth_joint" type="fixed">
		<origin xyz="0 0 0" rpy="${-pi/2} 0 ${-pi/2}"/>
		<parent link="camf_link"/>
		<child link="camf_depth_frame"/>
	</joint>

	<gazebo reference="camf_link">
		<sensor type="depth" name="camf">
		<update_rate>30.0</update_rate>
		<camera name="camf_cam">
			<horizontal_fov>1.6</horizontal_fov>
			<image>
			<width>800</width>
			<height>800</height>
			<format>R8G8B8</format>
			</image>
			<clip>
			<near>0.02</near>
			<far>3</far>
			</clip>
			<noise>
			<type>gaussian</type>
			<mean>0.0</mean>
			<stddev>0.007</stddev>
			</noise>
		</camera>
		<plugin name="depth_camera_controller" filename="libgazebo_ros_camera.so">
			<baseline>0.2</baseline>
			<alwaysOn>true</alwaysOn>
			<updateRate>0.0</updateRate>
			<frame_name>camf_depth_frame</frame_name>
			<pointCloudCutoff>0.5</pointCloudCutoff>
			<pointCloudCutoffMax>3.0</pointCloudCutoffMax>
			<distortionK1>0</distortionK1>
			<distortionK2>0</distortionK2>
			<distortionK3>0</distortionK3>
			<distortionT1>0</distortionT1>
			<distortionT2>0</distortionT2>
			<CxPrime>0</CxPrime>
			<Cx>0</Cx>
			<Cy>0</Cy>
			<focalLength>0</focalLength>
			<hackBaseline>0</hackBaseline>
		</plugin>
		</sensor>
	</gazebo>

	<!--camera object back-->
	<link name="camb_link">
		<visual>
		<origin xyz="0 0 0" rpy="0 0 0"/>
		<geometry>
			<box size="0.015 0.130 0.022"/>
		</geometry>
		</visual>

		<collision>
		<origin xyz="0 0 0" rpy="0 0 0"/>
		<geometry>
			<box size="0.015 0.130 0.022"/>
		</geometry>
		</collision>

		<inertial>
		<origin xyz="0 0 0" rpy="0 0 0"/>
		<mass value="0.035"/>
		<inertia ixx="0.001"  ixy="0"  ixz="0" iyy="0.001" iyz="0" izz="0.001" />
		</inertial>
	</link>

	<joint name="camb_joint" type="fixed">
		<parent link="base3_link"/>
		<child link="camb_link"/>
		<origin xyz="${-((square1_length/2)+0.015/2)} 0.0 ${(square2_height/2)-0.03-0.022/2}" rpy="0.0 0.0 ${pi}"/>
	</joint>

	<!--depth camera back-->
	<link name="camb_depth_frame"/>

	<joint name="camb_depth_joint" type="fixed">
		<origin xyz="0 0 0" rpy="${-pi/2} 0 ${-pi/2}"/>
		<parent link="camb_link"/>
		<child link="camb_depth_frame"/>
	</joint>

	<gazebo reference="camb_link">
		<sensor type="depth" name="camb">
		<update_rate>30.0</update_rate>
		<camera name="camb_cam">
			<horizontal_fov>1.6</horizontal_fov>
			<image>
			<width>800</width>
			<height>800</height>
			<format>R8G8B8</format>
			</image>
			<clip>
			<near>0.02</near>
			<far>3</far>
			</clip>
			<noise>
			<type>gaussian</type>
			<mean>0.0</mean>
			<stddev>0.007</stddev>
			</noise>
		</camera>
		<plugin name="depth_camera_controller" filename="libgazebo_ros_camera.so">
			<baseline>0.2</baseline>
			<alwaysOn>true</alwaysOn>
			<updateRate>0.0</updateRate>
			<frame_name>camb_depth_frame</frame_name>
			<pointCloudCutoff>0.5</pointCloudCutoff>
			<pointCloudCutoffMax>3.0</pointCloudCutoffMax>
			<distortionK1>0</distortionK1>
			<distortionK2>0</distortionK2>
			<distortionK3>0</distortionK3>
			<distortionT1>0</distortionT1>
			<distortionT2>0</distortionT2>
			<CxPrime>0</CxPrime>
			<Cx>0</Cx>
			<Cy>0</Cy>
			<focalLength>0</focalLength>
			<hackBaseline>0</hackBaseline>
		</plugin>
		</sensor>
	</gazebo>

	<!--2 IMU in each camera-->
	<link name="imu_link">
		<visual>
		<geometry>
			<box size="0.01 0.01 0.01"/>
		</geometry>
		</visual>
		
		<collision>
		<geometry>
			<box size="0.01 0.01 0.01"/>
		</geometry>
		</collision>
		
		<xacro:box_inertia m="0.01" w="0.01" d="0.01" h="0.01"/>
	</link>

	<joint name="imu_joint" type="fixed">
		<parent link="base_link"/>
		<child link="imu_link"/>
		<origin xyz="0 0 0.0"/>
	</joint>
		
	<gazebo reference="imu_link">
		<sensor name="imu_sensor" type="imu">
		<plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
			<ros>
			<namespace>/imu</namespace>
			<remapping>~/out:=data</remapping>
			</ros>
			<initial_orientation_as_reference>false</initial_orientation_as_reference>
		</plugin>
		<always_on>true</always_on>
		<update_rate>100</update_rate>
		<visualize>true</visualize>
		<imu>
			<angular_velocity>
			<x>
				<noise type="gaussian">
				<mean>0.0</mean>
				<stddev>2e-4</stddev>
				<bias_mean>0.0000075</bias_mean>
				<bias_stddev>0.0000008</bias_stddev>
				</noise>
			</x>
			<y>
				<noise type="gaussian">
				<mean>0.0</mean>
				<stddev>2e-4</stddev>
				<bias_mean>0.0000075</bias_mean>
				<bias_stddev>0.0000008</bias_stddev>
				</noise>
			</y>
			<z>
				<noise type="gaussian">
				<mean>0.0</mean>
				<stddev>2e-4</stddev>
				<bias_mean>0.0000075</bias_mean>
				<bias_stddev>0.0000008</bias_stddev>
				</noise>
			</z>
			</angular_velocity>
			<linear_acceleration>
			<x>
				<noise type="gaussian">
				<mean>0.0</mean>
				<stddev>1.7e-2</stddev>
				<bias_mean>0.1</bias_mean>
				<bias_stddev>0.001</bias_stddev>
				</noise>
			</x>
			<y>
				<noise type="gaussian">
				<mean>0.0</mean>
				<stddev>1.7e-2</stddev>
				<bias_mean>0.1</bias_mean>
				<bias_stddev>0.001</bias_stddev>
				</noise>
			</y>
			<z>
				<noise type="gaussian">
				<mean>0.0</mean>
				<stddev>1.7e-2</stddev>
				<bias_mean>0.1</bias_mean>
				<bias_stddev>0.001</bias_stddev>
				</noise>
			</z>
			</linear_acceleration>
		</imu>
		</sensor>
	</gazebo>

</robot>
